name: Build and Release AEMultibox

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., v1.2.3). If omitted here, use the push tag."
        required: false
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean
      draft:
        description: "Mark release as draft"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install AutoHotkey v2 locally (silent)
        shell: powershell
        run: |
          $version = '2.0.18'
          $setupUrl = "https://github.com/AutoHotkey/AutoHotkey/releases/download/v$version/AutoHotkey_$version_setup.exe"
          Invoke-WebRequest -Uri $setupUrl -OutFile "AutoHotkeySetup.exe"

          # Install to a writable folder in the workspace (no admin needed)
          $installDir = Join-Path $PWD 'ahk'
          New-Item -ItemType Directory -Force -Path $installDir | Out-Null

          Start-Process -FilePath .\AutoHotkeySetup.exe -ArgumentList "/SILENT","/NORESTART","/DIR=$installDir" -Wait

          $ahk2exe = Join-Path $installDir 'Compiler\Ahk2Exe.exe'
          $baseU64 = Join-Path $installDir 'AutoHotkeyU64.exe'
          if (!(Test-Path $ahk2exe)) { Write-Error "Ahk2Exe.exe not found at $ahk2exe"; exit 1 }
          if (!(Test-Path $baseU64)) { Write-Error "AutoHotkeyU64.exe not found at $baseU64"; exit 1 }

          "AHK2EXE=$ahk2exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "BASE_U64=$baseU64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "`u2713 Installed AutoHotkey v$version to $installDir"
          Write-Host "`u2713 Found compiler: $ahk2exe"
          Write-Host "`u2713 Found base: $baseU64"

      - name: Resolve version (tag or manual) and update script
        id: version
        shell: powershell
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and $env:INPUT_VERSION) {
            $version = $env:INPUT_VERSION
          } elseif ($env:GITHUB_REF -match 'refs/tags/(.+)$') {
            $version = $matches[1]
          } else {
            $version = 'v0.0.0'
          }
          $plain = $version.TrimStart('v')
          Set-Content "version.txt" $version
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "VERSION_PLAIN=$plain" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "`u2713 Version resolved: $version"

          if (Test-Path "AEMultibox.ahk") {
            $content = Get-Content "AEMultibox.ahk" -Raw
            $content = $content -replace '(?m)^(\s*global\s+AppVersion\s*:=\s*")([^"]+)(")', "$1$plain$3"
            $content = $content -replace '(?m)^(\s*AppVersion\s*:=\s*")([^"]+)(")', "$1$plain$3"
            $content = $content -replace '(?m)^(\s*;?\s*Version\s*:?\s*")([^"]+)(")', "$1$plain$3"
            Set-Content "AEMultibox.ahk" $content -Encoding UTF8
            Write-Host "`u2713 Updated AEMultibox.ahk version string to $plain"
          }

      - name: Validate by compiling (Ahk2Exe dry-run)
        shell: powershell
        run: |
          & "$env:AHK2EXE" /in AEMultibox.ahk /out _validate_tmp.exe /base "$env:BASE_U64" /compress 0
          $code = $LASTEXITCODE
          if ($code -ne 0) { Write-Error "Syntax/compile validation failed with exit code $code"; exit 1 }
          if (Test-Path _validate_tmp.exe) { Remove-Item _validate_tmp.exe -Force }
          Write-Host "`u2713 Syntax/compile validation passed"

      - name: Compile to executable (release build)
        shell: powershell
        run: |
          & "$env:AHK2EXE" /in AEMultibox.ahk /out AEMultibox.exe /base "$env:BASE_U64" /compress 1
          if (!(Test-Path "AEMultibox.exe")) { Write-Error "Compilation failed"; exit 1 }
          $size = (Get-Item "AEMultibox.exe").Length / 1MB
          Write-Host "`u2713 Compiled AEMultibox.exe ($([math]::Round($size,2)) MB)"

      - name: Create distribution folder
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item AEMultibox.exe .\dist\
          Copy-Item AEMultibox.ahk .\dist\
          Copy-Item version.txt .\dist\
          if (Test-Path .\AEBoost\AEBoost.exe) {
            Copy-Item .\AEBoost .\dist\AEBoost -Recurse
            Write-Host "`u2713 Included AEBoost folder"
          }
          @"
          # AEMultibox

          How to Run:
          1. Extract the zip
          2. Run AEMultibox.exe (or AEMultibox.ahk with AutoHotkey v2 installed)

          Files:
          - AEMultibox.exe
          - AEMultibox.ahk
          - version.txt
          - (optional) AEBoost/AEBoost.exe
          "@ | Set-Content .\dist\README.txt -Encoding UTF8
          Write-Host "`u2713 Distribution folder prepared"

      - name: Zip distribution (single asset)
        shell: powershell
        run: |
          $zipName = "AEMultibox-$env:VERSION.zip"
          if (Test-Path $zipName) { Remove-Item $zipName -Force }
          Compress-Archive -Path .\dist\* -DestinationPath $zipName
          if (!(Test-Path $zipName)) { Write-Error "Zip creation failed"; exit 1 }
          "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "`u2713 Created $zipName"

      - name: Generate latest.json for updater
        shell: powershell
        run: |
          $artifactName = $env:ZIP_NAME
          $version = $env:VERSION
          $json = [ordered]@{
            version = $version
            download = "https://github.com/${{ github.repository }}/releases/download/$version/$artifactName"
          } | ConvertTo-Json
          $json | Set-Content latest.json -Encoding UTF8
          Write-Host "`u2713 Wrote latest.json"

      - name: Upload artifact (optional CI browsing)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

      - name: Create GitHub Release (single zip + latest.json)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ZIP_NAME }}
            latest.json
          prerelease: ${{ github.event.inputs.prerelease }}
          draft: ${{ github.event.inputs.draft }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
