name: Build and Release AEMultibox

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
        type: string

jobs:
  test:
    name: Test Script Syntax
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup AutoHotkey
        run: |
          # Download AutoHotkey v2 from GitHub releases (more reliable)
          $ahkUrl = "https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.18/AutoHotkey_2.0.18.zip"
          Invoke-WebRequest -Uri $ahkUrl -OutFile "AutoHotkey.zip"
          Expand-Archive -Path "AutoHotkey.zip" -DestinationPath "AutoHotkey"
          
          # Copy the executable to the root for easier access
          Copy-Item "AutoHotkey\AutoHotkey64.exe" "AutoHotkey.exe"
          
      - name: Validate AHK Script Syntax
        run: |
          # AutoHotkey v2 doesn't have a /Validate flag
          # Instead, we'll use /ErrorStdOut to check for syntax errors without running
          # The /include flag with a non-existent file prevents actual execution
          
          Write-Host "Validating AEMultibox.ahk syntax..."
          
          # Create a wrapper script that just includes and validates syntax
          $validationScript = @"
          #Requires AutoHotkey v2.0
          #Include AEMultibox.ahk
          ExitApp(0)
          "@
          
          Set-Content "validate_syntax.ahk" $validationScript
          
          # Run with ErrorStdOut to capture any syntax errors
          $process = Start-Process -FilePath ".\AutoHotkey.exe" -ArgumentList "/ErrorStdOut", "validate_syntax.ahk" -Wait -PassThru -RedirectStandardError "error.txt" -RedirectStandardOutput "output.txt"
          
          if ($process.ExitCode -ne 0) {
            Write-Host "Syntax validation failed with exit code: $($process.ExitCode)"
            if (Test-Path "error.txt") {
              $errorContent = Get-Content "error.txt" -Raw
              if ($errorContent) {
                Write-Error "Syntax errors found:`n$errorContent"
              }
            }
            exit 1
          }
          
          Write-Host "[OK] Script syntax validation passed"
        shell: powershell
        
      - name: Check for required files
        run: |
          $requiredFiles = @(
            "AEMultibox.ahk",
            "README.md"
          )
          
          foreach ($file in $requiredFiles) {
            if (!(Test-Path $file)) {
              Write-Error "Required file missing: $file"
              exit 1
            }
          }
          Write-Host "[OK] All required files present"
        shell: powershell

  build:
    name: Build Executable
    needs: test
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup AutoHotkey Compiler
        run: |
          Write-Host "Setting up AutoHotkey v2 compiler environment..."
          
          # Try different Ahk2Exe release URLs
          $urls = @(
              "https://github.com/AutoHotkey/Ahk2Exe/releases/download/v1.1.37.02a0a/Ahk2Exe.zip",
              "https://github.com/AutoHotkey/Ahk2Exe/releases/download/v1.1.37.02a0/Ahk2Exe.zip",
              "https://github.com/AutoHotkey/Ahk2Exe/releases/download/v1.1.37.01c/Ahk2Exe.zip"
          )
          
          $downloaded = $false
          foreach ($url in $urls) {
              Write-Host "Trying to download from: $url"
              try {
                  Invoke-WebRequest -Uri $url -OutFile "Ahk2Exe.zip" -UseBasicParsing
                  Write-Host "Successfully downloaded Ahk2Exe.zip"
                  $downloaded = $true
                  break
              } catch {
                  Write-Host "Failed: $_"
              }
          }
          
          if (!$downloaded) {
              # Fallback: Download the exe directly from a known working release
              Write-Host "Trying direct exe download as fallback..."
              $exeUrl = "https://github.com/AutoHotkey/Ahk2Exe/releases/download/v1.1.37.01c/Ahk2Exe.exe"
              try {
                  Invoke-WebRequest -Uri $exeUrl -OutFile "Ahk2Exe.exe" -UseBasicParsing
                  Write-Host "Downloaded Ahk2Exe.exe directly"
              } catch {
                  Write-Error "Failed to download Ahk2Exe from any source"
                  exit 1
              }
          } else {
              # Extract compiler
              Write-Host "Extracting Ahk2Exe compiler..."
              Expand-Archive -Path "Ahk2Exe.zip" -DestinationPath "." -Force
          }
          
          # Verify Ahk2Exe.exe exists
          if (!(Test-Path "Ahk2Exe.exe")) {
              Write-Error "Ahk2Exe.exe not found"
              exit 1
          }
          
          Write-Host "Ahk2Exe.exe found"
          
          # Download AutoHotkey v2 for base files
          $baseUrl = "https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.18/AutoHotkey_2.0.18.zip"
          Write-Host "Downloading AutoHotkey v2 base files..."
          
          try {
              Invoke-WebRequest -Uri $baseUrl -OutFile "AutoHotkeyBase.zip" -UseBasicParsing
              Write-Host "AutoHotkey base files downloaded successfully"
          } catch {
              Write-Error "Failed to download AutoHotkey base: $_"
              exit 1
          }
          
          # Extract base files
          Write-Host "Extracting AutoHotkey base files..."
          Expand-Archive -Path "AutoHotkeyBase.zip" -DestinationPath "AutoHotkeyBase" -Force
          
          # Copy base executable for compilation (using the v2 64-bit exe as base)
          if (Test-Path "AutoHotkeyBase\AutoHotkey64.exe") {
              Copy-Item "AutoHotkeyBase\AutoHotkey64.exe" ".\AutoHotkey64.exe"
              Write-Host "Base file AutoHotkey64.exe copied"
          } else {
              Write-Error "AutoHotkey64.exe not found in base package"
              exit 1
          }
          
          # Also download BinMod.exe if needed (for post-processing)
          $binmodUrl = "https://github.com/AutoHotkey/Ahk2Exe/releases/download/v1.1.37.01c/BinMod.exe"
          try {
              Invoke-WebRequest -Uri $binmodUrl -OutFile "BinMod.exe" -UseBasicParsing
              Write-Host "BinMod.exe downloaded (for post-processing)"
          } catch {
              Write-Host "Warning: Could not download BinMod.exe (optional)"
          }
          
          Write-Host "[OK] AutoHotkey compiler setup complete"
          Write-Host "Files in current directory:"
          Get-ChildItem -Name | ForEach-Object { Write-Host "  - $_" }
        shell: powershell
        
      - name: Update version in script
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "v${{ github.event.inputs.version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          # Update version in AEMultibox.ahk
          $content = Get-Content "AEMultibox.ahk" -Raw
          $content = $content -replace '; Version: .*', "; Version: $version"
          $content = $content -replace 'global APP_VERSION := ".*"', "global APP_VERSION := `"$version`""
          Set-Content "AEMultibox.ahk" $content
          
          # Create version.txt for auto-updater
          Set-Content "version.txt" $version
          
          Write-Host "Updated to version: $version"
        shell: powershell
        
      - name: Compile to executable
        run: |
          # Compile the script
          .\Ahk2Exe\Ahk2Exe.exe /in AEMultibox.ahk /out AEMultibox.exe /base AutoHotkeyU64.exe /compress 1
          
          if (!(Test-Path "AEMultibox.exe")) {
            Write-Error "Compilation failed - executable not created"
            exit 1
          }
          
          $size = (Get-Item "AEMultibox.exe").Length / 1MB
          Write-Host "[OK] Successfully compiled AEMultibox.exe (Size: $([math]::Round($size, 2)) MB)"
        shell: powershell
        
      - name: Create distribution package
        run: |
          # Create dist directory
          New-Item -ItemType Directory -Force -Path "dist"
          
          # Copy main files
          Copy-Item "AEMultibox.exe" "dist/"
          Copy-Item "AEMultibox.ahk" "dist/"
          Copy-Item "version.txt" "dist/"
          Copy-Item "README.md" "dist/"
          
          # Copy AEBoost files if they exist
          if (Test-Path "AEBoost/AEBoost.exe") {
              New-Item -ItemType Directory -Force -Path "dist/AEBoost"
              Copy-Item "AEBoost/*" "dist/AEBoost/" -Recurse
              Write-Host "[OK] Included AEBoost integration"
          }
          
          # Create auto-updater script if it exists
          if (Test-Path "updater.ahk") {
              Copy-Item "updater.ahk" "dist/"
              Write-Host "[OK] Included updater script"
          }
          
          # Create checksums
          $hash = Get-FileHash "dist/AEMultibox.exe" -Algorithm SHA256
          @"
          File: AEMultibox.exe
          SHA256: $($hash.Hash)
          "@ | Set-Content "dist/checksums.txt"
          
          # Zip the distribution
          Compress-Archive -Path "dist/*" -DestinationPath "AEMultibox-dist.zip" -Force
          
          Write-Host "[OK] Distribution package created"
        shell: powershell
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AEMultibox-build
          path: |
            dist/
            AEMultibox-dist.zip
          retention-days: 90

  release:
    name: Create Release
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: AEMultibox-build
          
      - name: Generate release notes
        id: release_notes
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "v${{ github.event.inputs.version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $notes = @"
          # AEMultibox $version
          
          ## 📦 Installation
          1. Download ``AEMultibox-$version.zip``
          2. Extract to your desired location
          3. (Optional) Place AEBoost files in the ``AEBoost`` subfolder
          4. Run ``AEMultibox.exe`` (or ``AEMultibox.ahk`` if you have AutoHotkey v2 installed)
          
          ## 🔄 Auto-Update
          The application will automatically check for updates on startup. You can also manually check via the Settings tab.
          
          ## ✨ What's New
          - See [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
          
          ## 📝 Files Included
          - ``AEMultibox.exe`` - Compiled executable (no AutoHotkey required)
          - ``AEMultibox.ahk`` - Source script (requires AutoHotkey v2)
          - ``updater.ahk`` - Auto-updater component (if available)
          - ``version.txt`` - Version information
          - ``checksums.txt`` - File integrity verification
          
          ## ⚠️ Requirements
          - Windows 10/11
          - Ashen Empires game client
          - Administrator privileges recommended for memory reading
          
          ## 🛡️ Security
          - SHA256 checksum provided in ``checksums.txt``
          - All releases are automatically built via GitHub Actions
          "@
          
          # Save to file for release
          Set-Content "release_notes.md" $notes
          
          # Output for GitHub
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: powershell
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_notes.outputs.version }}
          name: AEMultibox ${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            AEMultibox-dist.zip
            dist/AEMultibox.exe
            dist/AEMultibox.ahk
            dist/version.txt
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update latest release pointer
        run: |
          # Create latest.json for auto-updater
          $version = "${{ steps.release_notes.outputs.version }}"
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/$version/AEMultibox.exe"
          
          $latest = @{
            version = $version
            download_url = $downloadUrl
            release_date = Get-Date -Format "yyyy-MM-dd"
            checksum = (Get-FileHash "dist/AEMultibox.exe" -Algorithm SHA256).Hash
          } | ConvertTo-Json
          
          Set-Content "latest.json" $latest
          
          Write-Host "[OK] Created latest.json for auto-updater"
        shell: powershell
        
      - name: Upload latest.json
        uses: actions/upload-artifact@v4
        with:
          name: latest-version-info
          path: latest.json

  notify:
    name: Notify Success
    needs: [test, build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ] && \
             [ "${{ needs.release.result }}" == "success" ]; then
            echo "[SUCCESS] Release pipeline completed successfully!"
            echo "Version released: ${{ github.ref_name }}"
          else
            echo "[FAILED] Release pipeline failed"
            echo "Test: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "Release: ${{ needs.release.result }}"
            exit 1
          fi
