name: Build and Release AEMultibox

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AutoHotkey (v2)
        shell: powershell
        run: |
          $ahkUrl = "https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.18/AutoHotkey_2.0.18.zip"
          Invoke-WebRequest -Uri $ahkUrl -OutFile "AutoHotkey.zip"
          Expand-Archive -Path "AutoHotkey.zip" -DestinationPath "AutoHotkey"
          Copy-Item "AutoHotkey\AutoHotkey64.exe" "AutoHotkey.exe"

      - name: Validate AHK Script Syntax
        shell: powershell
        run: |
          Write-Host "Validating AEMultibox.ahk syntax..."

          $validationScript = @"
          #Requires AutoHotkey v2.0
          #Include AEMultibox.ahk
          ExitApp(0)
          "@

          Set-Content -Path "validate_syntax.ahk" -Value $validationScript -Encoding UTF8

          $ahkExe = "$PWD\AutoHotkey.exe"
          & $ahkExe '/ErrorStdOut' 'validate_syntax.ahk' 1> output.txt 2> error.txt
          $exit = $LASTEXITCODE

          if ($exit -ne 0) {
            Write-Host "Syntax validation failed with exit code: $exit"
            if (Test-Path "error.txt") {
              $errorContent = Get-Content "error.txt" -Raw
              if ($errorContent) { Write-Error "Syntax errors:`n$errorContent" }
            }
            exit 1
          }

          Write-Host "`u2713 Script syntax validation passed"

      - name: Download Ahk2Exe compiler
        shell: powershell
        run: |
          $ahk2exeUrl = "https://github.com/AutoHotkey/Ahk2Exe/releases/download/v1.1.37.01/Ahk2Exe.exe.zip"
          Invoke-WebRequest -Uri $ahk2exeUrl -OutFile "Ahk2Exe.zip"
          Expand-Archive -Path "Ahk2Exe.zip" -DestinationPath "Ahk2Exe"

          $baseUrl = "https://github.com/AutoHotkey/AutoHotkey/releases/download/v2.0.18/AutoHotkey_2.0.18.zip"
          Invoke-WebRequest -Uri $baseUrl -OutFile "Base.zip"
          Expand-Archive -Path "Base.zip" -DestinationPath "Base"
          Copy-Item "Base/v2/AutoHotkeyU64.exe" "AutoHotkeyU64.exe"

      - name: Determine version from tag
        id: version
        shell: powershell
        run: |
          $ref = "$env:GITHUB_REF"  # refs/tags/vX.Y.Z
          if ($ref -match 'refs/tags/(.+)$') { $version = $matches[1] } else { $version = "v0.0.0" }
          $plain = $version.TrimStart('v')
          Set-Content "version.txt" $version
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "VERSION_PLAIN=$plain" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "`u2713 Version resolved: $version"

      - name: Compile to executable
        shell: powershell
        run: |
          .\Ahk2Exe\Ahk2Exe.exe /in AEMultibox.ahk /out AEMultibox.exe /base AutoHotkeyU64.exe /compress 1
          if (!(Test-Path "AEMultibox.exe")) { Write-Error "Compilation failed"; exit 1 }
          $size = (Get-Item "AEMultibox.exe").Length / 1MB
          Write-Host "`u2713 Compiled AEMultibox.exe ($([math]::Round($size,2)) MB)"

      - name: Create distribution folder
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item AEMultibox.exe .\dist\
          Copy-Item AEMultibox.ahk .\dist\
          Copy-Item version.txt .\dist\
          if (Test-Path .\aeboost\aeboost) { Copy-Item .\aeboost\aeboost .\dist\ -Recurse; Write-Host "`u2713 Included aeboost folder" }
          @"
          # AEMultibox

          How to Run:
          1. Extract the zip
          2. Run AEMultibox.exe (or AEMultibox.ahk with AutoHotkey v2 installed)

          Files:
          - AEMultibox.exe
          - AEMultibox.ahk
          - version.txt
          - (optional) aeboost folder
          "@ | Set-Content .\dist\README.txt -Encoding UTF8
          Write-Host "`u2713 Distribution folder prepared"

      - name: Zip distribution (single asset)
        shell: powershell
        run: |
          $zipName = "AEMultibox-$env:VERSION.zip"
          if (Test-Path $zipName) { Remove-Item $zipName -Force }
          Compress-Archive -Path .\dist\* -DestinationPath $zipName
          if (!(Test-Path $zipName)) { Write-Error "Zip creation failed"; exit 1 }
          "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "`u2713 Created $zipName"

      - name: Generate latest.json for updater
        shell: powershell
        run: |
          $artifactName = $env:ZIP_NAME
          $version = $env:VERSION
          $json = [ordered]@{
            version = $version
            download = "https://github.com/${{ github.repository }}/releases/download/$version/$artifactName"
          } | ConvertTo-Json
          $json | Set-Content latest.json -Encoding UTF8
          Write-Host "`u2713 Wrote latest.json"

      - name: Upload artifact (optional CI browsing)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

      - name: Create GitHub Release (single zip + latest.json)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ZIP_NAME }}
            latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
